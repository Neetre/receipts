def detect_receipt(self, image: Image) -> Image:
        # identify the receipt in the image and crop it
        image_np = np.array(image)  # image is already grayscale
        blurred = cv2.GaussianBlur(image_np, (5, 5), 0)
        edged = cv2.Canny(blurred, 75, 200)

        contours, _ = cv2.findContours(edged, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
        contours = sorted(contours, key=cv2.contourArea, reverse=True)[:5]

        screenCnt = None

        for c in contours:
            peri = cv2.arcLength(c, True)
            approx = cv2.approxPolyDP(c, 0.02 * peri, True)

            if len(approx) == 4:
                screenCnt = approx
                break

        if screenCnt is None:
            raise ValueError("No receipt found in the image")

        rect = cv2.minAreaRect(screenCnt)
        box = cv2.boxPoints(rect)
        box = np.int0(box)

        width = int(rect[1][0])
        height = int(rect[1][1])

        src_pts = box.astype("float32")
        dst_pts = np.array([[0, height-1],
                    [0, 0],
                    [width-1, 0],
                    [width-1, height-1]], dtype="float32")

        M = cv2.getPerspectiveTransform(src_pts, dst_pts)
        warped = cv2.warpPerspective(image_np, M, (width, height))

        return Image.fromarray(warped)

    def detect_brightness_contrast(self, image: Image):
        image_np = np.array(image)
        # Convert to grayscale if the image is in color
        if len(image_np.shape) == 3:
            image_np = cv2.cvtColor(image_np, cv2.COLOR_BGR2GRAY)
        # Calculate brightness as the mean pixel value
        brightness = np.mean(image_np)
        # Calculate contrast as the standard deviation of pixel values
        contrast = np.std(image_np)
        return brightness, contrast

    def preprocess_receipt(self, image: Image) -> Image:
        brightness, contrast = self.detect_brightness_contrast(image)
        print(f"Brightness: {brightness}, Contrast: {contrast}")
        
        image_np = np.array(image)
        brightness = -(brightness-100)
        ic(brightness)
        contrast = 1.5
        adjusted_image = cv2.addWeighted(image_np, contrast, np.zeros(image_np.shape, image_np.dtype), 0, brightness)
        kernel = np.array([[0, -1, 0], [-1, 5, -1], [0, -1, 0]])
        adjusted_image = cv2.filter2D(adjusted_image, -1, kernel) 
        image = Image.fromarray(adjusted_image)
        brightness, contrast = self.detect_brightness_contrast(image)
        print(f"Adjusted Brightness: {brightness}, Adjusted Contrast: {contrast}")
        adjusted_image = self.detect_receipt(image)
        cv2.imwrite("../data/adjusted_image.png", adjusted_image)
        return image